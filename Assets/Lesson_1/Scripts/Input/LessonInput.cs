//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Lesson_1/Scripts/Input/LessonInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LessonInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LessonInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LessonInput"",
    ""maps"": [
        {
            ""name"": ""Weapon"",
            ""id"": ""c0472cb2-8656-4f30-844a-f0f64e205690"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""92cafd21-6220-4dbf-b3b8-18a475a80523"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch_weapon_1"",
                    ""type"": ""Button"",
                    ""id"": ""fc143ffc-4b9b-4597-9527-b271fffe8479"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch_weapon_2"",
                    ""type"": ""Button"",
                    ""id"": ""45390a13-be0e-4ee1-89af-2531fe284c4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch_weapon_3"",
                    ""type"": ""Button"",
                    ""id"": ""7b42c8d4-c5f5-4613-b571-645385c5086e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""8ce220d4-3e68-4e9a-beed-ead82efeff7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""67ed2622-eef3-496a-a7ad-211b007e9419"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7cb4b63-9121-4587-912b-2d02af81db17"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch_weapon_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c931ab9e-7747-4e26-8535-53548b39398d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch_weapon_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""362dd727-56aa-44db-854d-40f65f96fdd1"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch_weapon_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1df56bdc-141c-46df-a2ae-be24db12d7ef"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Weapon
        m_Weapon = asset.FindActionMap("Weapon", throwIfNotFound: true);
        m_Weapon_Fire = m_Weapon.FindAction("Fire", throwIfNotFound: true);
        m_Weapon_Switch_weapon_1 = m_Weapon.FindAction("Switch_weapon_1", throwIfNotFound: true);
        m_Weapon_Switch_weapon_2 = m_Weapon.FindAction("Switch_weapon_2", throwIfNotFound: true);
        m_Weapon_Switch_weapon_3 = m_Weapon.FindAction("Switch_weapon_3", throwIfNotFound: true);
        m_Weapon_Reload = m_Weapon.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Weapon
    private readonly InputActionMap m_Weapon;
    private List<IWeaponActions> m_WeaponActionsCallbackInterfaces = new List<IWeaponActions>();
    private readonly InputAction m_Weapon_Fire;
    private readonly InputAction m_Weapon_Switch_weapon_1;
    private readonly InputAction m_Weapon_Switch_weapon_2;
    private readonly InputAction m_Weapon_Switch_weapon_3;
    private readonly InputAction m_Weapon_Reload;
    public struct WeaponActions
    {
        private @LessonInput m_Wrapper;
        public WeaponActions(@LessonInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Weapon_Fire;
        public InputAction @Switch_weapon_1 => m_Wrapper.m_Weapon_Switch_weapon_1;
        public InputAction @Switch_weapon_2 => m_Wrapper.m_Weapon_Switch_weapon_2;
        public InputAction @Switch_weapon_3 => m_Wrapper.m_Weapon_Switch_weapon_3;
        public InputAction @Reload => m_Wrapper.m_Weapon_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Weapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Switch_weapon_1.started += instance.OnSwitch_weapon_1;
            @Switch_weapon_1.performed += instance.OnSwitch_weapon_1;
            @Switch_weapon_1.canceled += instance.OnSwitch_weapon_1;
            @Switch_weapon_2.started += instance.OnSwitch_weapon_2;
            @Switch_weapon_2.performed += instance.OnSwitch_weapon_2;
            @Switch_weapon_2.canceled += instance.OnSwitch_weapon_2;
            @Switch_weapon_3.started += instance.OnSwitch_weapon_3;
            @Switch_weapon_3.performed += instance.OnSwitch_weapon_3;
            @Switch_weapon_3.canceled += instance.OnSwitch_weapon_3;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IWeaponActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Switch_weapon_1.started -= instance.OnSwitch_weapon_1;
            @Switch_weapon_1.performed -= instance.OnSwitch_weapon_1;
            @Switch_weapon_1.canceled -= instance.OnSwitch_weapon_1;
            @Switch_weapon_2.started -= instance.OnSwitch_weapon_2;
            @Switch_weapon_2.performed -= instance.OnSwitch_weapon_2;
            @Switch_weapon_2.canceled -= instance.OnSwitch_weapon_2;
            @Switch_weapon_3.started -= instance.OnSwitch_weapon_3;
            @Switch_weapon_3.performed -= instance.OnSwitch_weapon_3;
            @Switch_weapon_3.canceled -= instance.OnSwitch_weapon_3;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IWeaponActions instance)
        {
            if (m_Wrapper.m_WeaponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponActions @Weapon => new WeaponActions(this);
    public interface IWeaponActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnSwitch_weapon_1(InputAction.CallbackContext context);
        void OnSwitch_weapon_2(InputAction.CallbackContext context);
        void OnSwitch_weapon_3(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
